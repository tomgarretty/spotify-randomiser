const request = require('request-promise');
const url = require('url');

const SPOTIFY_API_BASE = 'https://api.spotify.com/v1';

const SPOTIFY_AUTH_HOST = 'accounts.spotify.com';
const SPOTIFY_AUTH_PATH = 'authorize';
const REDIRECT_URI = 'http://localhost:3000/api/spotify/authorise';
const SCOPES = ['playlist-read-collaborative', 'playlist-read-private', 'playlist-modify-private', 'playlist-modify-public']

const clientId = process.env.CLIENT_ID;
const clientSecret = process.env.CLIENT_SECRET;
let accessToken;
let userId;

const getAuthorisationUrl = () => url.format({
  protocol: 'https',
  host: SPOTIFY_AUTH_HOST,
  pathname: SPOTIFY_AUTH_PATH,
  query: {
    client_id: clientId,
    redirect_uri: REDIRECT_URI,
    response_type: 'code',
    scope: SCOPES.join(' ')
  }
});

const getUserId = () =>
  request.get({
    uri: `${SPOTIFY_API_BASE}/me`,
    headers: {
      'Authorization': `Bearer ${accessToken}`
    },
    json: true
  }).then(result => result.id);

const authorise = async code => {
  const data = await request.post({
    uri: `https://${SPOTIFY_AUTH_HOST}/api/token`,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded'
    },
    form: {
      grant_type: 'authorization_code',
      code,
      redirect_uri: REDIRECT_URI,
      client_id: clientId,
      client_secret: clientSecret
    },
    json: true
  });

  accessToken = data.access_token;
  userId = await getUserId();
};

const isAuthenticated = () => !!accessToken;

const createPlaylist = name =>
  request.post({
    uri: `${SPOTIFY_API_BASE}/users/${userId}/playlists`,
    headers: {
      'Authorization': `Bearer ${accessToken}`
    },
    body: {
      name,
      description: 'Shuffled playlist generated by spotify-randomiser'
    },
    json: true
  }).then(result => result.id)

const addTracks = (playlistId, uris) =>
  request.post({
    uri: `${SPOTIFY_API_BASE}/playlists/${playlistId}/tracks`,
    headers: {
      'Authorization': `Bearer ${accessToken}`
    },
    body: {
      uris
    },
    json: true
  });


const addAllTracks = async (playlistId, uris) => {
  const totalTracks = uris.length
  let tracksAdded = 0;
  while (tracksAdded < totalTracks) {
    await addTracks(playlistId, uris.slice(tracksAdded, Math.min(tracksAdded + 100, totalTracks)))
    tracksAdded += 100;
  }
}

const getTracks = (playlistId, offset) =>
  request.get({
    uri: `${SPOTIFY_API_BASE}/playlists/${playlistId}/tracks`,
    headers: {
      'Authorization': `Bearer ${accessToken}`
    },
    qs: {
      offset
    },
    json: true
  })


const getAllTracks = async playlistId => {
  const tracks = [];
  let offset = 0;
  while (true) {
    const result = await getTracks(playlistId, offset);
    result.items.forEach(track => tracks.push(track))
    if (result.next) {
      offset += 100;
    } else {
      break;
    }
  }
  return tracks;
}

const getPlaylist = playlistId =>
  request.get({
    uri: `${SPOTIFY_API_BASE}/playlists/${playlistId}`,
    headers: {
      'Authorization': `Bearer ${accessToken}`
    },
    json: true
  });

const getPlaylists = () =>
  request.get({
    uri: `${SPOTIFY_API_BASE}/users/${userId}/playlists`,
    headers: {
      'Authorization': `Bearer ${accessToken}`
    },
    json: true
  }).then(result => result.items);


module.exports = {
  getAuthorisationUrl,
  authorise,
  isAuthenticated,
  createPlaylist,
  addAllTracks,
  getAllTracks,
  getPlaylists,
  getPlaylist
}
